# syntax=docker/dockerfile:1

ARG PHP_VERSION=8.4
ARG ALPINE_VERSION=3.22
ARG UID=1000
ARG GID=1001
ARG TZ=Europe/Moscow
ARG APP_ENV=dev

# ---------- Build stage ----------
FROM php:${PHP_VERSION}-fpm-alpine${ALPINE_VERSION} AS builder

# ---------- Metadata ----------
LABEL org.opencontainers.image.title="PHP 8.4 Docker Image"
LABEL org.opencontainers.image.description="PHP 8.4 with essential extensions for Symfony"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/kaevdokimov/php"
LABEL org.opencontainers.image.version="8.4"
LABEL org.opencontainers.image.created="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
LABEL org.opencontainers.image.authors="Kirill Evdokimov <kirillprof@ya.ru>"

ENV PHP_CONF_DIR=/usr/local/etc/php/conf.d \
    COMPOSER_ALLOW_SUPERUSER=1

RUN apk add --no-cache --virtual .build-deps $PHPIZE_DEPS \
    git unzip wget curl openssh-client bash icu-dev libxml2-dev gmp-dev libpng-dev \
    libzip-dev postgresql-dev rabbitmq-c-dev libssh-dev gettext-dev linux-headers \
    autoconf gcc g++ make pcre-dev zlib-dev && \
    docker-php-ext-install -j$(nproc) \
      bcmath gettext gd gmp intl opcache pcntl pdo_pgsql simplexml sockets zip sysvsem && \
    pecl install -o -f apcu amqp igbinary redis && \
    docker-php-ext-enable apcu amqp igbinary redis && \
    if [ "$APP_ENV" = "dev" ]; then \
      pecl install xdebug && docker-php-ext-enable xdebug ; \
    fi && \
    rm -rf /tmp/pear ~/.pearrc && \
    apk del .build-deps

COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

# ---------- Runtime stage ----------
FROM php:${PHP_VERSION}-fpm-alpine${ALPINE_VERSION}

ARG UID
ARG GID
ARG TZ
ARG APP_ENV

ENV PHP_CONF_DIR=/usr/local/etc/php/conf.d \
    TZ=${TZ} \
    APP_ENV=${APP_ENV} \
    COMPOSER_ALLOW_SUPERUSER=1

COPY --from=builder /usr/local/lib/php/extensions /usr/local/lib/php/extensions
COPY --from=builder /usr/local/etc/php/conf.d /usr/local/etc/php/conf.d
COPY --from=builder /usr/local/bin/composer /usr/local/bin/composer

RUN apk add --no-cache shadow icu libzip postgresql-libs rabbitmq-c gmp gettext && \
    if ! getent group www >/dev/null 2>&1; then addgroup -g ${GID} www; fi && \
    if ! id www-data >/dev/null 2>&1; then adduser -D -u ${UID} -G www www-data; fi && \
    ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone && \
    echo "date.timezone=${TZ}" > ${PHP_CONF_DIR}/custom.ini && \
    if [ "$APP_ENV" = "dev" ]; then \
      echo "xdebug.mode=develop,debug,coverage" > ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini && \
      echo "xdebug.start_with_request=yes" >> ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini && \
      echo "xdebug.client_host=host.docker.internal" >> ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini && \
      echo "xdebug.log=/var/log/xdebug.log" >> ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini && \
      echo "xdebug.log_level=0" >> ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini && \
      echo "xdebug.idekey=PHPSTORM" >> ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini ; \
    else \
      rm -f ${PHP_CONF_DIR}/docker-php-ext-xdebug.ini ; \
    fi

WORKDIR /var/www
USER www-data
CMD ["php-fpm"]
